// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum QuizStatusEnum {
  JOINING
  PLAYING
  END_ROUND
  EVALUATION
  SCORE_VIEWING
  END_QUIZ
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model QuizStatus {
  id                Int            @id @default(autoincrement())
  status            QuizStatusEnum
  // question already has reference to current round
  currentQuestion   Question       @relation(fields: [currentQuestionId], references: [id])
  currentQuestionId Int            @unique
  quiz              Quiz?
}

model Quiz {
  id           Int         @id @default(autoincrement())
  teams        Team[]
  quizStatusId Int?        @unique
  quizStatus   QuizStatus? @relation(fields: [quizStatusId], references: [id])
  rounds       Round[]
  password     String
  pin          String
  name         String
}

model Round {
  id          Int           @id @default(autoincrement())
  name        String
  questions   Question[]
  quiz        Quiz          @relation(fields: [quizId], references: [id])
  quizId      Int
  teamAnswers TeamAnswers[]
}

model Question {
  id         Int         @id @default(autoincrement())
  content    String
  answer     String
  mediaType  MediaType?
  mediaURL   String?
  round      Round       @relation(fields: [roundId], references: [id])
  roundId    Int
  quizStatus QuizStatus?
}

model Team {
  id      Int           @id @default(autoincrement())
  name    String
  answers TeamAnswers[]
  quiz    Quiz          @relation(fields: [quizId], references: [id])
  quizId  Int
}

model TeamAnswers {
  id      Int    @id @default(autoincrement())
  roundId Int
  round   Round  @relation(fields: [roundId], references: [id])
  answer  String
  score   Float
  team    Team   @relation(fields: [teamId], references: [id])
  teamId  Int
}
