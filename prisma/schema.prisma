// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum GameStatusEnum {
  JOINING
  PLAYING
  END_ROUND
  EVALUATION
  SCORE_VIEWING
  END_QUIZ
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model GameStatus {
  id                Int            @id @default(autoincrement())
  status            GameStatusEnum
  // question already has reference to current topic
  currentQuestion   Question       @relation(fields: [currentQuestionId], references: [id])
  currentQuestionId Int            @unique
  game              Game?
}

model Game {
  id           Int         @id @default(autoincrement())
  teams        Team[]
  gameStatusId Int?        @unique
  gameStatus   GameStatus? @relation(fields: [gameStatusId], references: [id])
  topics       Topic[]
  password     String
  pin          String
  name         String
}

model Topic {
  id          Int           @id @default(autoincrement())
  name        String
  questions   Question[]
  game        Game          @relation(fields: [gameId], references: [id])
  gameId      Int
  teamAnswers TeamAnswers[]
}

model Question {
  id         Int         @id @default(autoincrement())
  content    String
  answer     String
  mediaType  MediaType?
  mediaURL   String?
  topic      Topic       @relation(fields: [topicId], references: [id])
  topicId    Int
  gameStatus GameStatus?
}

model Team {
  id      Int           @id @default(autoincrement())
  name    String
  answers TeamAnswers[]
  game    Game          @relation(fields: [gameId], references: [id])
  gameId  Int
}

model TeamAnswers {
  id      Int    @id @default(autoincrement())
  topicId Int
  topic   Topic  @relation(fields: [topicId], references: [id])
  answer  String
  score   Float
  team    Team   @relation(fields: [teamId], references: [id])
  teamId  Int
}
